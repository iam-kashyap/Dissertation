# -*- coding: utf-8 -*-
"""ResultAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XlkRgJiIDn7JXG6eonA0t6GPkIkbyx6C

# Result Analysis
"""

from google.colab import drive
drive.mount('/content/drive')

import json
import pandas as pd
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
# TODO: Change this path to the path of your 3_Testing directory
# %cd /content/drive/MyDrive/Dissertation/5_Evaluation

"""## Load Data"""

from pprint import pprint

full_results = {}

"""### RL Strategies"""

# loads in RL results
results = {}
data_set = 'Test'
thetas = ['0.00013', '0.00017', '0.00023']
pairs = ['AUDUSD', 'EURGBP', 'EURUSD', 'USDCAD']

for theta in thetas:
  theta_dict = {}
  for pair in pairs:
    with open(f'../3_Testing/Results/{theta}/{data_set}/{pair}.json') as f:
      data = json.load(f)['All Trades']
      theta_dict[pair] = data

    results[theta] = pd.DataFrame(theta_dict)

full_results['RL'] = results

results['0.00013']

results['0.00017']

results['0.00023']

"""### Buy and Hold Strategy"""

# loads in BH results
results = {}
thetas = ['0.00013', '0.00017', '0.00023']
pairs = ['AUDUSD', 'EURGBP', 'EURUSD', 'USDCAD']

for theta in thetas:
    theta_dict = {}
    for pair in pairs:
        with open(f'../4_Benchmarking/Results/BH/{pair}.json') as f:
            data = json.load(f)
            theta_dict[pair] = data

    results[theta] = pd.DataFrame(theta_dict)

full_results['BH'] = results

pprint(results['0.00023'])

"""### DC MAC Strategy"""

# loads in DC MAC results
results = {}
data_set = 'Test'
thetas = ['0.00013', '0.00017', '0.00023']
pairs = ['AUDUSD', 'EURGBP', 'EURUSD', 'USDCAD']

for theta in thetas:
  theta_dict = {}
  for pair in pairs:
    with open(f'../4_Benchmarking/Results/DC_MAC/{theta}/{pair}.json') as f:
      data = json.load(f)
      theta_dict[pair] = data

    results[theta] = pd.DataFrame(theta_dict)

full_results['DC_MAC'] = results

full_results['DC_MAC']['0.00023']

"""### Dummy Data
This is just a placeholder to fill in for the RL results if you do not have them yet. This data is randomly generated and should not be used other than to test the code.
"""

# loads in results
results = {}
data_set = 'Val'
thetas = ['0.00013', '0.00017', '0.00023']
pairs = ['AUDUSD', 'EURGBP', 'EURUSD', 'USDCAD']

for theta in thetas:
  theta_dict = {}
  for pair in pairs:
    cols = ['AUDUSD', 'EURGBP', 'EURUSD', 'USDCAD']
    indexes = ['Return (%)', 'Risk (%)', 'Maximum Drawdown (%)', 'Calmar Ratio',
       'Win Rate (%)', 'Average Return (%)', 'Ave. Positive Returns (%)']
    data = pd.DataFrame(np.random.rand(7, 4), indexes, cols)
    results[theta] = data

full_results['RL_Dummy'] = results

full_results['DC_MAC']['0.00017'].loc['Return (%)']

"""## Significance"""

# Friedman test - is there significance
from scipy.stats import friedmanchisquare

metric = 'calmar ratio'

result_data = []

if metric == 'calmar ratio':
    for strategy in full_results.keys():
        strategy_results = []
        for theta in ['0.00013', '0.00017', '0.00023']:
            strategy_results.append(full_results[strategy][theta].loc['Return (%)'].values)
        result_data.append(np.concatenate(strategy_results))
result_df = pd.DataFrame(result_data, full_results.keys())



res = friedmanchisquare(*result_data)
print(res.statistic, res.pvalue)  # pvalues is less than 0.05 then significant

result_df

# rank
result_df.rank(ascending=False)  # set ascending to True for Maximum Drawdown

!pip install scikit-posthocs -q

# Posthoc test
import scikit_posthocs as sp

sp.posthoc_conover_friedman(result_df.T)